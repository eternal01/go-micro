// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usersAuthsFieldNames          = builder.RawFieldNames(&UsersAuths{})
	usersAuthsRows                = strings.Join(usersAuthsFieldNames, ",")
	usersAuthsRowsExpectAutoSet   = strings.Join(stringx.Remove(usersAuthsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	usersAuthsRowsWithPlaceHolder = strings.Join(stringx.Remove(usersAuthsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUsersAuthsIdPrefix                    = "cache:usersAuths:id:"
	cacheUsersAuthsUserIdAuthKeyAuthTypePrefix = "cache:usersAuths:userId:authKey:authType:"
)

type (
	usersAuthsModel interface {
		Insert(ctx context.Context, data *UsersAuths) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UsersAuths, error)
		FindOneByUserIdAuthKeyAuthType(ctx context.Context, userId int64, authKey string, authType int64) (*UsersAuths, error)
		Update(ctx context.Context, data *UsersAuths) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUsersAuthsModel struct {
		sqlc.CachedConn
		table string
	}

	UsersAuths struct {
		Id             int64        `db:"id"`              // 主键id
		UserId         int64        `db:"user_id"`         // 用户id
		AuthType       int64        `db:"auth_type"`       // 认证类型(1-手机密码;2-手机验证码;3-邮箱密码)
		AuthKey        string       `db:"auth_key"`        // 认证标识
		AuthCredential string       `db:"auth_credential"` // 认证凭据
		CreatedAt      sql.NullTime `db:"created_at"`      // 创建时间
		UpdatedAt      sql.NullTime `db:"updated_at"`      // 更新时间
		DeletedAt      sql.NullTime `db:"deleted_at"`      // 删除时间
	}
)

func newUsersAuthsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUsersAuthsModel {
	return &defaultUsersAuthsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`users_auths`",
	}
}

func (m *defaultUsersAuthsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	usersAuthsIdKey := fmt.Sprintf("%s%v", cacheUsersAuthsIdPrefix, id)
	usersAuthsUserIdAuthKeyAuthTypeKey := fmt.Sprintf("%s%v:%v:%v", cacheUsersAuthsUserIdAuthKeyAuthTypePrefix, data.UserId, data.AuthKey, data.AuthType)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, usersAuthsIdKey, usersAuthsUserIdAuthKeyAuthTypeKey)
	return err
}

func (m *defaultUsersAuthsModel) FindOne(ctx context.Context, id int64) (*UsersAuths, error) {
	usersAuthsIdKey := fmt.Sprintf("%s%v", cacheUsersAuthsIdPrefix, id)
	var resp UsersAuths
	err := m.QueryRowCtx(ctx, &resp, usersAuthsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usersAuthsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersAuthsModel) FindOneByUserIdAuthKeyAuthType(ctx context.Context, userId int64, authKey string, authType int64) (*UsersAuths, error) {
	usersAuthsUserIdAuthKeyAuthTypeKey := fmt.Sprintf("%s%v:%v:%v", cacheUsersAuthsUserIdAuthKeyAuthTypePrefix, userId, authKey, authType)
	var resp UsersAuths
	err := m.QueryRowIndexCtx(ctx, &resp, usersAuthsUserIdAuthKeyAuthTypeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `auth_key` = ? and `auth_type` = ? limit 1", usersAuthsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, authKey, authType); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersAuthsModel) Insert(ctx context.Context, data *UsersAuths) (sql.Result, error) {
	usersAuthsIdKey := fmt.Sprintf("%s%v", cacheUsersAuthsIdPrefix, data.Id)
	usersAuthsUserIdAuthKeyAuthTypeKey := fmt.Sprintf("%s%v:%v:%v", cacheUsersAuthsUserIdAuthKeyAuthTypePrefix, data.UserId, data.AuthKey, data.AuthType)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, usersAuthsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.AuthType, data.AuthKey, data.AuthCredential, data.DeletedAt)
	}, usersAuthsIdKey, usersAuthsUserIdAuthKeyAuthTypeKey)
	return ret, err
}

func (m *defaultUsersAuthsModel) Update(ctx context.Context, newData *UsersAuths) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	usersAuthsIdKey := fmt.Sprintf("%s%v", cacheUsersAuthsIdPrefix, data.Id)
	usersAuthsUserIdAuthKeyAuthTypeKey := fmt.Sprintf("%s%v:%v:%v", cacheUsersAuthsUserIdAuthKeyAuthTypePrefix, data.UserId, data.AuthKey, data.AuthType)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, usersAuthsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.AuthType, newData.AuthKey, newData.AuthCredential, newData.DeletedAt, newData.Id)
	}, usersAuthsIdKey, usersAuthsUserIdAuthKeyAuthTypeKey)
	return err
}

func (m *defaultUsersAuthsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUsersAuthsIdPrefix, primary)
}

func (m *defaultUsersAuthsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usersAuthsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUsersAuthsModel) tableName() string {
	return m.table
}
