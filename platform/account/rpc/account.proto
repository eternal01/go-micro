syntax = "proto3";

package account;
option go_package = "./account";

message RegisterRequest {
  string mobile = 1;
  string email = 2;
  int64 authType = 3;
  string authKey = 4;
  string authCredential = 5;
}
message RegisterResponse {
  string accessToken = 1;
  int64  accessExpire = 2;
  int64  refreshAfter = 3;
}


message LoginRequest {
  string mobile = 1;
  string email = 2;
  int64 authType = 3;
  string authKey = 4;
  string authCredential = 5;
}

message LoginResponse {
  string accessToken = 1;
  int64  accessExpire = 2;
  int64  refreshAfter = 3;
}

message GetUserRequest {
  int64  id = 1;
}

message GetUserByMobileRequest {
  string mobile = 1;
}

message GetUserByEmailRequest {
  string email = 1;
}

message GetUserResponse {
  int64 id = 1;
  string userName = 2;
  string nickName = 3;
  string avatar = 4;
  int64  gender = 5;
  string mobile = 6;
  string email = 7;
  int64 status = 8;
}

message GetUserAuthByUserIdAuthKeyAuthTypeRequest {
  int64 userId = 1;
  string  authKey = 2;
  int64  authType = 3;
}
message GetUserAuthResponse {
  int64  id = 1;
  int64  userId = 2;
  int64  authType = 3;
  string authKey = 4;
  string authCredential = 5;
}


message GenerateTokenRequest {
  int64 userId = 1;
}
message GenerateTokenResponse {
  string accessToken = 1;
  int64  accessExpire = 2;
  int64  refreshAfter = 3;
}


message UpdateUserRequest {
  int64 id = 1;
  string userName = 2;
  string nickName = 3;
  string avatar = 4;
  int64  gender = 5;
  string mobile = 6;
  string email = 7;
  int64 status = 8;
}
message UpdateUserResponse {
  int64 id = 1;
  string userName = 2;
  string nickName = 3;
  string avatar = 4;
  int64  gender = 5;
  string mobile = 6;
  string email = 7;
  int64 status = 8;
}


//service
service Account {
  rpc register(RegisterRequest) returns(RegisterResponse);
  rpc login(LoginRequest) returns(LoginResponse);
  rpc getUser(GetUserRequest) returns(GetUserResponse);
  rpc getUserByEmail(GetUserByEmailRequest) returns(GetUserResponse);
  rpc getUserByMobile(GetUserByMobileRequest) returns(GetUserResponse);
  rpc getUserAuthByUserIdAuthKeyAuthType(GetUserAuthByUserIdAuthKeyAuthTypeRequest) returns(GetUserAuthResponse);
  rpc generateToken(GenerateTokenRequest) returns(GenerateTokenResponse);
  rpc updateUser(UpdateUserRequest) returns(UpdateUserResponse);
}