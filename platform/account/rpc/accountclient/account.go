// Code generated by goctl. DO NOT EDIT.
// Source: account.proto

package accountclient

import (
	"context"

	"go-micro/platform/account/rpc/account"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GenerateTokenRequest        = account.GenerateTokenRequest
	GenerateTokenResponse       = account.GenerateTokenResponse
	GetUserAuthByAuthKeyRequest = account.GetUserAuthByAuthKeyRequest
	GetUserAuthByUserIdRequest  = account.GetUserAuthByUserIdRequest
	GetUserAuthResponse         = account.GetUserAuthResponse
	GetUserByEmailRequest       = account.GetUserByEmailRequest
	GetUserByMobileRequest      = account.GetUserByMobileRequest
	GetUserRequest              = account.GetUserRequest
	GetUserResponse             = account.GetUserResponse
	LoginRequest                = account.LoginRequest
	LoginResponse               = account.LoginResponse
	RegisterRequest             = account.RegisterRequest
	RegisterResponse            = account.RegisterResponse

	Account interface {
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		GetUserByMobile(ctx context.Context, in *GetUserByMobileRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyRequest, opts ...grpc.CallOption) (*GetUserAuthResponse, error)
		GetUserAuthByUserId(ctx context.Context, in *GetUserAuthByUserIdRequest, opts ...grpc.CallOption) (*GetUserAuthResponse, error)
		GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
	}

	defaultAccount struct {
		cli zrpc.Client
	}
)

func NewAccount(cli zrpc.Client) Account {
	return &defaultAccount{
		cli: cli,
	}
}

func (m *defaultAccount) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultAccount) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultAccount) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultAccount) GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.GetUserByEmail(ctx, in, opts...)
}

func (m *defaultAccount) GetUserByMobile(ctx context.Context, in *GetUserByMobileRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.GetUserByMobile(ctx, in, opts...)
}

func (m *defaultAccount) GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyRequest, opts ...grpc.CallOption) (*GetUserAuthResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.GetUserAuthByAuthKey(ctx, in, opts...)
}

func (m *defaultAccount) GetUserAuthByUserId(ctx context.Context, in *GetUserAuthByUserIdRequest, opts ...grpc.CallOption) (*GetUserAuthResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.GetUserAuthByUserId(ctx, in, opts...)
}

func (m *defaultAccount) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}
