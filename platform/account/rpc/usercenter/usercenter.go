// Code generated by goctl. DO NOT EDIT.
// Source: account.proto

package usercenter

import (
	"context"

	"go-micro/platform/account/rpc/account"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GenerateTokenRequest         = account.GenerateTokenRequest
	GenerateTokenResponse        = account.GenerateTokenResponse
	GetUserAuthByAuthKeyRequest  = account.GetUserAuthByAuthKeyRequest
	GetUserAuthByAuthKeyResponse = account.GetUserAuthByAuthKeyResponse
	GetUserAuthByUserIdRequest   = account.GetUserAuthByUserIdRequest
	GetUserAuthByUserIdResponse  = account.GetUserAuthByUserIdResponse
	GetUserRequest               = account.GetUserRequest
	GetUserResponse              = account.GetUserResponse
	LoginRequest                 = account.LoginRequest
	LoginResponse                = account.LoginResponse
	RegisterRequest              = account.RegisterRequest
	RegisterResponse             = account.RegisterResponse
	User                         = account.User
	UserAuth                     = account.UserAuth

	Usercenter interface {
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyRequest, opts ...grpc.CallOption) (*GetUserAuthByAuthKeyResponse, error)
		GetUserAuthByUserId(ctx context.Context, in *GetUserAuthByUserIdRequest, opts ...grpc.CallOption) (*GetUserAuthByUserIdResponse, error)
		GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
	}

	defaultUsercenter struct {
		cli zrpc.Client
	}
)

func NewUsercenter(cli zrpc.Client) Usercenter {
	return &defaultUsercenter{
		cli: cli,
	}
}

func (m *defaultUsercenter) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := account.NewUsercenterClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUsercenter) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := account.NewUsercenterClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := account.NewUsercenterClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyRequest, opts ...grpc.CallOption) (*GetUserAuthByAuthKeyResponse, error) {
	client := account.NewUsercenterClient(m.cli.Conn())
	return client.GetUserAuthByAuthKey(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserAuthByUserId(ctx context.Context, in *GetUserAuthByUserIdRequest, opts ...grpc.CallOption) (*GetUserAuthByUserIdResponse, error) {
	client := account.NewUsercenterClient(m.cli.Conn())
	return client.GetUserAuthByUserId(ctx, in, opts...)
}

func (m *defaultUsercenter) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	client := account.NewUsercenterClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}
