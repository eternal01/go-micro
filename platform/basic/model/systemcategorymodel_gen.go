// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemCategoryFieldNames          = builder.RawFieldNames(&SystemCategory{})
	systemCategoryRows                = strings.Join(systemCategoryFieldNames, ",")
	systemCategoryRowsExpectAutoSet   = strings.Join(stringx.Remove(systemCategoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	systemCategoryRowsWithPlaceHolder = strings.Join(stringx.Remove(systemCategoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheSystemCategoryIdPrefix = "cache:systemCategory:id:"
)

type (
	systemCategoryModel interface {
		Insert(ctx context.Context, data *SystemCategory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SystemCategory, error)
		Update(ctx context.Context, data *SystemCategory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSystemCategoryModel struct {
		sqlc.CachedConn
		table string
	}

	SystemCategory struct {
		Id          int64  `db:"id"`          // 主键id
		Name        string `db:"name"`        // 类别名称
		ParentId    int64  `db:"parent_id"`   // 父级id
		Description string `db:"description"` // 类别描述
	}
)

func newSystemCategoryModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSystemCategoryModel {
	return &defaultSystemCategoryModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`system_category`",
	}
}

func (m *defaultSystemCategoryModel) Delete(ctx context.Context, id int64) error {
	systemCategoryIdKey := fmt.Sprintf("%s%v", cacheSystemCategoryIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, systemCategoryIdKey)
	return err
}

func (m *defaultSystemCategoryModel) FindOne(ctx context.Context, id int64) (*SystemCategory, error) {
	systemCategoryIdKey := fmt.Sprintf("%s%v", cacheSystemCategoryIdPrefix, id)
	var resp SystemCategory
	err := m.QueryRowCtx(ctx, &resp, systemCategoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemCategoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemCategoryModel) Insert(ctx context.Context, data *SystemCategory) (sql.Result, error) {
	systemCategoryIdKey := fmt.Sprintf("%s%v", cacheSystemCategoryIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, systemCategoryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.Description)
	}, systemCategoryIdKey)
	return ret, err
}

func (m *defaultSystemCategoryModel) Update(ctx context.Context, data *SystemCategory) error {
	systemCategoryIdKey := fmt.Sprintf("%s%v", cacheSystemCategoryIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, systemCategoryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.Description, data.Id)
	}, systemCategoryIdKey)
	return err
}

func (m *defaultSystemCategoryModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSystemCategoryIdPrefix, primary)
}

func (m *defaultSystemCategoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemCategoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSystemCategoryModel) tableName() string {
	return m.table
}
