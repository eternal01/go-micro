// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemClassifyFieldNames          = builder.RawFieldNames(&SystemClassify{})
	systemClassifyRows                = strings.Join(systemClassifyFieldNames, ",")
	systemClassifyRowsExpectAutoSet   = strings.Join(stringx.Remove(systemClassifyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	systemClassifyRowsWithPlaceHolder = strings.Join(stringx.Remove(systemClassifyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheSystemClassifyIdPrefix = "cache:systemClassify:id:"
)

type (
	systemClassifyModel interface {
		Insert(ctx context.Context, data *SystemClassify) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SystemClassify, error)
		Update(ctx context.Context, data *SystemClassify) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSystemClassifyModel struct {
		sqlc.CachedConn
		table string
	}

	SystemClassify struct {
		Id          int64  `db:"id"`          // 主键id
		Name        string `db:"name"`        // 分类名称
		ParentId    int64  `db:"parent_id"`   // 父级id
		Description string `db:"description"` // 分类描述
	}
)

func newSystemClassifyModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSystemClassifyModel {
	return &defaultSystemClassifyModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`system_classify`",
	}
}

func (m *defaultSystemClassifyModel) Delete(ctx context.Context, id int64) error {
	systemClassifyIdKey := fmt.Sprintf("%s%v", cacheSystemClassifyIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, systemClassifyIdKey)
	return err
}

func (m *defaultSystemClassifyModel) FindOne(ctx context.Context, id int64) (*SystemClassify, error) {
	systemClassifyIdKey := fmt.Sprintf("%s%v", cacheSystemClassifyIdPrefix, id)
	var resp SystemClassify
	err := m.QueryRowCtx(ctx, &resp, systemClassifyIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemClassifyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemClassifyModel) Insert(ctx context.Context, data *SystemClassify) (sql.Result, error) {
	systemClassifyIdKey := fmt.Sprintf("%s%v", cacheSystemClassifyIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, systemClassifyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.Description)
	}, systemClassifyIdKey)
	return ret, err
}

func (m *defaultSystemClassifyModel) Update(ctx context.Context, data *SystemClassify) error {
	systemClassifyIdKey := fmt.Sprintf("%s%v", cacheSystemClassifyIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, systemClassifyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.Description, data.Id)
	}, systemClassifyIdKey)
	return err
}

func (m *defaultSystemClassifyModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSystemClassifyIdPrefix, primary)
}

func (m *defaultSystemClassifyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemClassifyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSystemClassifyModel) tableName() string {
	return m.table
}
