// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemConfigurationFieldNames          = builder.RawFieldNames(&SystemConfiguration{})
	systemConfigurationRows                = strings.Join(systemConfigurationFieldNames, ",")
	systemConfigurationRowsExpectAutoSet   = strings.Join(stringx.Remove(systemConfigurationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	systemConfigurationRowsWithPlaceHolder = strings.Join(stringx.Remove(systemConfigurationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheSystemConfigurationIdPrefix   = "cache:systemConfiguration:id:"
	cacheSystemConfigurationNamePrefix = "cache:systemConfiguration:name:"
)

type (
	systemConfigurationModel interface {
		Insert(ctx context.Context, data *SystemConfiguration) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SystemConfiguration, error)
		FindOneByName(ctx context.Context, name string) (*SystemConfiguration, error)
		Update(ctx context.Context, data *SystemConfiguration) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSystemConfigurationModel struct {
		sqlc.CachedConn
		table string
	}

	SystemConfiguration struct {
		Id          int64  `db:"id"`          // 主键id
		Name        string `db:"name"`        // 名称
		Description string `db:"description"` // 描述
		Content     string `db:"content"`     // 内容
	}
)

func newSystemConfigurationModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSystemConfigurationModel {
	return &defaultSystemConfigurationModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`system_configuration`",
	}
}

func (m *defaultSystemConfigurationModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	systemConfigurationIdKey := fmt.Sprintf("%s%v", cacheSystemConfigurationIdPrefix, id)
	systemConfigurationNameKey := fmt.Sprintf("%s%v", cacheSystemConfigurationNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, systemConfigurationIdKey, systemConfigurationNameKey)
	return err
}

func (m *defaultSystemConfigurationModel) FindOne(ctx context.Context, id int64) (*SystemConfiguration, error) {
	systemConfigurationIdKey := fmt.Sprintf("%s%v", cacheSystemConfigurationIdPrefix, id)
	var resp SystemConfiguration
	err := m.QueryRowCtx(ctx, &resp, systemConfigurationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemConfigurationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemConfigurationModel) FindOneByName(ctx context.Context, name string) (*SystemConfiguration, error) {
	systemConfigurationNameKey := fmt.Sprintf("%s%v", cacheSystemConfigurationNamePrefix, name)
	var resp SystemConfiguration
	err := m.QueryRowIndexCtx(ctx, &resp, systemConfigurationNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", systemConfigurationRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemConfigurationModel) Insert(ctx context.Context, data *SystemConfiguration) (sql.Result, error) {
	systemConfigurationIdKey := fmt.Sprintf("%s%v", cacheSystemConfigurationIdPrefix, data.Id)
	systemConfigurationNameKey := fmt.Sprintf("%s%v", cacheSystemConfigurationNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, systemConfigurationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Description, data.Content)
	}, systemConfigurationIdKey, systemConfigurationNameKey)
	return ret, err
}

func (m *defaultSystemConfigurationModel) Update(ctx context.Context, newData *SystemConfiguration) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	systemConfigurationIdKey := fmt.Sprintf("%s%v", cacheSystemConfigurationIdPrefix, data.Id)
	systemConfigurationNameKey := fmt.Sprintf("%s%v", cacheSystemConfigurationNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, systemConfigurationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Description, newData.Content, newData.Id)
	}, systemConfigurationIdKey, systemConfigurationNameKey)
	return err
}

func (m *defaultSystemConfigurationModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSystemConfigurationIdPrefix, primary)
}

func (m *defaultSystemConfigurationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemConfigurationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSystemConfigurationModel) tableName() string {
	return m.table
}
