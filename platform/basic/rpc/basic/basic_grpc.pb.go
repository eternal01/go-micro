// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: basic.proto

package basic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Basic_Ping_FullMethodName                    = "/basic.Basic/Ping"
	Basic_GetRegion_FullMethodName               = "/basic.Basic/getRegion"
	Basic_GetRegions_FullMethodName              = "/basic.Basic/getRegions"
	Basic_AddRegion_FullMethodName               = "/basic.Basic/addRegion"
	Basic_UpdateRegion_FullMethodName            = "/basic.Basic/updateRegion"
	Basic_DeleteRegion_FullMethodName            = "/basic.Basic/deleteRegion"
	Basic_GetIndustry_FullMethodName             = "/basic.Basic/getIndustry"
	Basic_GetIndustryByIndustryId_FullMethodName = "/basic.Basic/getIndustryByIndustryId"
	Basic_GetIndustries_FullMethodName           = "/basic.Basic/getIndustries"
	Basic_AddIndustry_FullMethodName             = "/basic.Basic/addIndustry"
	Basic_UpdateIndustry_FullMethodName          = "/basic.Basic/updateIndustry"
	Basic_DeleteIndustry_FullMethodName          = "/basic.Basic/deleteIndustry"
	Basic_GetClassify_FullMethodName             = "/basic.Basic/getClassify"
	Basic_GetClassifies_FullMethodName           = "/basic.Basic/getClassifies"
	Basic_AddClassify_FullMethodName             = "/basic.Basic/addClassify"
	Basic_UpdateClassify_FullMethodName          = "/basic.Basic/updateClassify"
	Basic_DeleteClassify_FullMethodName          = "/basic.Basic/deleteClassify"
	Basic_GetCategory_FullMethodName             = "/basic.Basic/getCategory"
	Basic_GetCategories_FullMethodName           = "/basic.Basic/getCategories"
	Basic_AddCategory_FullMethodName             = "/basic.Basic/addCategory"
	Basic_UpdateCategory_FullMethodName          = "/basic.Basic/updateCategory"
	Basic_DeleteCategory_FullMethodName          = "/basic.Basic/deleteCategory"
	Basic_GetStage_FullMethodName                = "/basic.Basic/getStage"
	Basic_GetStages_FullMethodName               = "/basic.Basic/getStages"
	Basic_AddStage_FullMethodName                = "/basic.Basic/addStage"
	Basic_UpdateStage_FullMethodName             = "/basic.Basic/updateStage"
	Basic_DeleteStage_FullMethodName             = "/basic.Basic/deleteStage"
	Basic_GetConfiguration_FullMethodName        = "/basic.Basic/getConfiguration"
	Basic_GetConfigurationByName_FullMethodName  = "/basic.Basic/getConfigurationByName"
	Basic_GetConfigurations_FullMethodName       = "/basic.Basic/getConfigurations"
	Basic_AddConfiguration_FullMethodName        = "/basic.Basic/addConfiguration"
	Basic_UpdateConfiguration_FullMethodName     = "/basic.Basic/updateConfiguration"
	Basic_DeleteConfiguration_FullMethodName     = "/basic.Basic/deleteConfiguration"
)

// BasicClient is the client API for Basic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// 获取地区信息
	GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetRegionResponse, error)
	// 根据父级id获取地区信息
	GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error)
	// 添加地区信息
	AddRegion(ctx context.Context, in *AddRegionRequest, opts ...grpc.CallOption) (*AddRegionResponse, error)
	// 更新地区信息
	UpdateRegion(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*UpdateRegionResponse, error)
	// 删除地区信息
	DeleteRegion(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*DeleteRegionResponse, error)
	// 获取职业信息
	GetIndustry(ctx context.Context, in *GetIndustryRequest, opts ...grpc.CallOption) (*GetIndustryResponse, error)
	// 根据industry_id获取职业信息
	GetIndustryByIndustryId(ctx context.Context, in *GetIndustryByIndustryIdRequest, opts ...grpc.CallOption) (*GetIndustryResponse, error)
	// 根据父级id获取职业信息
	GetIndustries(ctx context.Context, in *GetIndustriesRequest, opts ...grpc.CallOption) (*GetIndustriesResponse, error)
	// 添加职业信息
	AddIndustry(ctx context.Context, in *AddIndustryRequest, opts ...grpc.CallOption) (*AddIndustryResponse, error)
	// 更新职业信息
	UpdateIndustry(ctx context.Context, in *UpdateIndustryRequest, opts ...grpc.CallOption) (*UpdateIndustryResponse, error)
	// 删除职业信息
	DeleteIndustry(ctx context.Context, in *DeleteIndustryRequest, opts ...grpc.CallOption) (*DeleteIndustryResponse, error)
	// 获取分类信息
	GetClassify(ctx context.Context, in *GetClassifyRequest, opts ...grpc.CallOption) (*GetClassifyResponse, error)
	// 根据父级id获取分类信息
	GetClassifies(ctx context.Context, in *GetClassifiesRequest, opts ...grpc.CallOption) (*GetClassifiesResponse, error)
	// 添加分类信息
	AddClassify(ctx context.Context, in *AddClassifyRequest, opts ...grpc.CallOption) (*AddClassifyResponse, error)
	// 更新分类信息
	UpdateClassify(ctx context.Context, in *UpdateClassifyRequest, opts ...grpc.CallOption) (*UpdateClassifyResponse, error)
	// 删除分类信息
	DeleteClassify(ctx context.Context, in *DeleteClassifyRequest, opts ...grpc.CallOption) (*DeleteClassifyResponse, error)
	// 获取类别信息
	GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error)
	// 根据父级id获取类别信息
	GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error)
	// 添加类别信息
	AddCategory(ctx context.Context, in *AddCategoryRequest, opts ...grpc.CallOption) (*AddCategoryResponse, error)
	// 更新类别信息
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
	// 删除类别信息
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error)
	// 获取阶段信息
	GetStage(ctx context.Context, in *GetStageRequest, opts ...grpc.CallOption) (*GetStageResponse, error)
	// 根据父级id获取阶段信息
	GetStages(ctx context.Context, in *GetStagesRequest, opts ...grpc.CallOption) (*GetStagesResponse, error)
	// 添加阶段信息
	AddStage(ctx context.Context, in *AddStageRequest, opts ...grpc.CallOption) (*AddStageResponse, error)
	// 更新阶段信息
	UpdateStage(ctx context.Context, in *UpdateStageRequest, opts ...grpc.CallOption) (*UpdateStageResponse, error)
	// 删除阶段信息
	DeleteStage(ctx context.Context, in *DeleteStageRequest, opts ...grpc.CallOption) (*DeleteStageResponse, error)
	// 获取配置信息
	GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error)
	// 根据配置名称获取配置信息
	GetConfigurationByName(ctx context.Context, in *GetConfigurationByNameRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error)
	// 获取配置列表
	GetConfigurations(ctx context.Context, in *GetConfigurationsRequest, opts ...grpc.CallOption) (*GetConfigurationsResponse, error)
	// 添加配置信息
	AddConfiguration(ctx context.Context, in *AddConfigurationRequest, opts ...grpc.CallOption) (*AddConfigurationResponse, error)
	// 更新配置信息
	UpdateConfiguration(ctx context.Context, in *UpdateConfigurationRequest, opts ...grpc.CallOption) (*UpdateConfigurationResponse, error)
	// 删除配置信息
	DeleteConfiguration(ctx context.Context, in *DeleteConfigurationRequest, opts ...grpc.CallOption) (*DeleteConfigurationResponse, error)
}

type basicClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicClient(cc grpc.ClientConnInterface) BasicClient {
	return &basicClient{cc}
}

func (c *basicClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Basic_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetRegionResponse, error) {
	out := new(GetRegionResponse)
	err := c.cc.Invoke(ctx, Basic_GetRegion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error) {
	out := new(GetRegionsResponse)
	err := c.cc.Invoke(ctx, Basic_GetRegions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) AddRegion(ctx context.Context, in *AddRegionRequest, opts ...grpc.CallOption) (*AddRegionResponse, error) {
	out := new(AddRegionResponse)
	err := c.cc.Invoke(ctx, Basic_AddRegion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) UpdateRegion(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*UpdateRegionResponse, error) {
	out := new(UpdateRegionResponse)
	err := c.cc.Invoke(ctx, Basic_UpdateRegion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) DeleteRegion(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*DeleteRegionResponse, error) {
	out := new(DeleteRegionResponse)
	err := c.cc.Invoke(ctx, Basic_DeleteRegion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) GetIndustry(ctx context.Context, in *GetIndustryRequest, opts ...grpc.CallOption) (*GetIndustryResponse, error) {
	out := new(GetIndustryResponse)
	err := c.cc.Invoke(ctx, Basic_GetIndustry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) GetIndustryByIndustryId(ctx context.Context, in *GetIndustryByIndustryIdRequest, opts ...grpc.CallOption) (*GetIndustryResponse, error) {
	out := new(GetIndustryResponse)
	err := c.cc.Invoke(ctx, Basic_GetIndustryByIndustryId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) GetIndustries(ctx context.Context, in *GetIndustriesRequest, opts ...grpc.CallOption) (*GetIndustriesResponse, error) {
	out := new(GetIndustriesResponse)
	err := c.cc.Invoke(ctx, Basic_GetIndustries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) AddIndustry(ctx context.Context, in *AddIndustryRequest, opts ...grpc.CallOption) (*AddIndustryResponse, error) {
	out := new(AddIndustryResponse)
	err := c.cc.Invoke(ctx, Basic_AddIndustry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) UpdateIndustry(ctx context.Context, in *UpdateIndustryRequest, opts ...grpc.CallOption) (*UpdateIndustryResponse, error) {
	out := new(UpdateIndustryResponse)
	err := c.cc.Invoke(ctx, Basic_UpdateIndustry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) DeleteIndustry(ctx context.Context, in *DeleteIndustryRequest, opts ...grpc.CallOption) (*DeleteIndustryResponse, error) {
	out := new(DeleteIndustryResponse)
	err := c.cc.Invoke(ctx, Basic_DeleteIndustry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) GetClassify(ctx context.Context, in *GetClassifyRequest, opts ...grpc.CallOption) (*GetClassifyResponse, error) {
	out := new(GetClassifyResponse)
	err := c.cc.Invoke(ctx, Basic_GetClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) GetClassifies(ctx context.Context, in *GetClassifiesRequest, opts ...grpc.CallOption) (*GetClassifiesResponse, error) {
	out := new(GetClassifiesResponse)
	err := c.cc.Invoke(ctx, Basic_GetClassifies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) AddClassify(ctx context.Context, in *AddClassifyRequest, opts ...grpc.CallOption) (*AddClassifyResponse, error) {
	out := new(AddClassifyResponse)
	err := c.cc.Invoke(ctx, Basic_AddClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) UpdateClassify(ctx context.Context, in *UpdateClassifyRequest, opts ...grpc.CallOption) (*UpdateClassifyResponse, error) {
	out := new(UpdateClassifyResponse)
	err := c.cc.Invoke(ctx, Basic_UpdateClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) DeleteClassify(ctx context.Context, in *DeleteClassifyRequest, opts ...grpc.CallOption) (*DeleteClassifyResponse, error) {
	out := new(DeleteClassifyResponse)
	err := c.cc.Invoke(ctx, Basic_DeleteClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error) {
	out := new(GetCategoryResponse)
	err := c.cc.Invoke(ctx, Basic_GetCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error) {
	out := new(GetCategoriesResponse)
	err := c.cc.Invoke(ctx, Basic_GetCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) AddCategory(ctx context.Context, in *AddCategoryRequest, opts ...grpc.CallOption) (*AddCategoryResponse, error) {
	out := new(AddCategoryResponse)
	err := c.cc.Invoke(ctx, Basic_AddCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	out := new(UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, Basic_UpdateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error) {
	out := new(DeleteCategoryResponse)
	err := c.cc.Invoke(ctx, Basic_DeleteCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) GetStage(ctx context.Context, in *GetStageRequest, opts ...grpc.CallOption) (*GetStageResponse, error) {
	out := new(GetStageResponse)
	err := c.cc.Invoke(ctx, Basic_GetStage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) GetStages(ctx context.Context, in *GetStagesRequest, opts ...grpc.CallOption) (*GetStagesResponse, error) {
	out := new(GetStagesResponse)
	err := c.cc.Invoke(ctx, Basic_GetStages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) AddStage(ctx context.Context, in *AddStageRequest, opts ...grpc.CallOption) (*AddStageResponse, error) {
	out := new(AddStageResponse)
	err := c.cc.Invoke(ctx, Basic_AddStage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) UpdateStage(ctx context.Context, in *UpdateStageRequest, opts ...grpc.CallOption) (*UpdateStageResponse, error) {
	out := new(UpdateStageResponse)
	err := c.cc.Invoke(ctx, Basic_UpdateStage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) DeleteStage(ctx context.Context, in *DeleteStageRequest, opts ...grpc.CallOption) (*DeleteStageResponse, error) {
	out := new(DeleteStageResponse)
	err := c.cc.Invoke(ctx, Basic_DeleteStage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error) {
	out := new(GetConfigurationResponse)
	err := c.cc.Invoke(ctx, Basic_GetConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) GetConfigurationByName(ctx context.Context, in *GetConfigurationByNameRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error) {
	out := new(GetConfigurationResponse)
	err := c.cc.Invoke(ctx, Basic_GetConfigurationByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) GetConfigurations(ctx context.Context, in *GetConfigurationsRequest, opts ...grpc.CallOption) (*GetConfigurationsResponse, error) {
	out := new(GetConfigurationsResponse)
	err := c.cc.Invoke(ctx, Basic_GetConfigurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) AddConfiguration(ctx context.Context, in *AddConfigurationRequest, opts ...grpc.CallOption) (*AddConfigurationResponse, error) {
	out := new(AddConfigurationResponse)
	err := c.cc.Invoke(ctx, Basic_AddConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) UpdateConfiguration(ctx context.Context, in *UpdateConfigurationRequest, opts ...grpc.CallOption) (*UpdateConfigurationResponse, error) {
	out := new(UpdateConfigurationResponse)
	err := c.cc.Invoke(ctx, Basic_UpdateConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) DeleteConfiguration(ctx context.Context, in *DeleteConfigurationRequest, opts ...grpc.CallOption) (*DeleteConfigurationResponse, error) {
	out := new(DeleteConfigurationResponse)
	err := c.cc.Invoke(ctx, Basic_DeleteConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicServer is the server API for Basic service.
// All implementations must embed UnimplementedBasicServer
// for forward compatibility
type BasicServer interface {
	Ping(context.Context, *Request) (*Response, error)
	// 获取地区信息
	GetRegion(context.Context, *GetRegionRequest) (*GetRegionResponse, error)
	// 根据父级id获取地区信息
	GetRegions(context.Context, *GetRegionsRequest) (*GetRegionsResponse, error)
	// 添加地区信息
	AddRegion(context.Context, *AddRegionRequest) (*AddRegionResponse, error)
	// 更新地区信息
	UpdateRegion(context.Context, *UpdateRegionRequest) (*UpdateRegionResponse, error)
	// 删除地区信息
	DeleteRegion(context.Context, *DeleteRegionRequest) (*DeleteRegionResponse, error)
	// 获取职业信息
	GetIndustry(context.Context, *GetIndustryRequest) (*GetIndustryResponse, error)
	// 根据industry_id获取职业信息
	GetIndustryByIndustryId(context.Context, *GetIndustryByIndustryIdRequest) (*GetIndustryResponse, error)
	// 根据父级id获取职业信息
	GetIndustries(context.Context, *GetIndustriesRequest) (*GetIndustriesResponse, error)
	// 添加职业信息
	AddIndustry(context.Context, *AddIndustryRequest) (*AddIndustryResponse, error)
	// 更新职业信息
	UpdateIndustry(context.Context, *UpdateIndustryRequest) (*UpdateIndustryResponse, error)
	// 删除职业信息
	DeleteIndustry(context.Context, *DeleteIndustryRequest) (*DeleteIndustryResponse, error)
	// 获取分类信息
	GetClassify(context.Context, *GetClassifyRequest) (*GetClassifyResponse, error)
	// 根据父级id获取分类信息
	GetClassifies(context.Context, *GetClassifiesRequest) (*GetClassifiesResponse, error)
	// 添加分类信息
	AddClassify(context.Context, *AddClassifyRequest) (*AddClassifyResponse, error)
	// 更新分类信息
	UpdateClassify(context.Context, *UpdateClassifyRequest) (*UpdateClassifyResponse, error)
	// 删除分类信息
	DeleteClassify(context.Context, *DeleteClassifyRequest) (*DeleteClassifyResponse, error)
	// 获取类别信息
	GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error)
	// 根据父级id获取类别信息
	GetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error)
	// 添加类别信息
	AddCategory(context.Context, *AddCategoryRequest) (*AddCategoryResponse, error)
	// 更新类别信息
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error)
	// 删除类别信息
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error)
	// 获取阶段信息
	GetStage(context.Context, *GetStageRequest) (*GetStageResponse, error)
	// 根据父级id获取阶段信息
	GetStages(context.Context, *GetStagesRequest) (*GetStagesResponse, error)
	// 添加阶段信息
	AddStage(context.Context, *AddStageRequest) (*AddStageResponse, error)
	// 更新阶段信息
	UpdateStage(context.Context, *UpdateStageRequest) (*UpdateStageResponse, error)
	// 删除阶段信息
	DeleteStage(context.Context, *DeleteStageRequest) (*DeleteStageResponse, error)
	// 获取配置信息
	GetConfiguration(context.Context, *GetConfigurationRequest) (*GetConfigurationResponse, error)
	// 根据配置名称获取配置信息
	GetConfigurationByName(context.Context, *GetConfigurationByNameRequest) (*GetConfigurationResponse, error)
	// 获取配置列表
	GetConfigurations(context.Context, *GetConfigurationsRequest) (*GetConfigurationsResponse, error)
	// 添加配置信息
	AddConfiguration(context.Context, *AddConfigurationRequest) (*AddConfigurationResponse, error)
	// 更新配置信息
	UpdateConfiguration(context.Context, *UpdateConfigurationRequest) (*UpdateConfigurationResponse, error)
	// 删除配置信息
	DeleteConfiguration(context.Context, *DeleteConfigurationRequest) (*DeleteConfigurationResponse, error)
	mustEmbedUnimplementedBasicServer()
}

// UnimplementedBasicServer must be embedded to have forward compatible implementations.
type UnimplementedBasicServer struct {
}

func (UnimplementedBasicServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBasicServer) GetRegion(context.Context, *GetRegionRequest) (*GetRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}
func (UnimplementedBasicServer) GetRegions(context.Context, *GetRegionsRequest) (*GetRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegions not implemented")
}
func (UnimplementedBasicServer) AddRegion(context.Context, *AddRegionRequest) (*AddRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRegion not implemented")
}
func (UnimplementedBasicServer) UpdateRegion(context.Context, *UpdateRegionRequest) (*UpdateRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegion not implemented")
}
func (UnimplementedBasicServer) DeleteRegion(context.Context, *DeleteRegionRequest) (*DeleteRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegion not implemented")
}
func (UnimplementedBasicServer) GetIndustry(context.Context, *GetIndustryRequest) (*GetIndustryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndustry not implemented")
}
func (UnimplementedBasicServer) GetIndustryByIndustryId(context.Context, *GetIndustryByIndustryIdRequest) (*GetIndustryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndustryByIndustryId not implemented")
}
func (UnimplementedBasicServer) GetIndustries(context.Context, *GetIndustriesRequest) (*GetIndustriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndustries not implemented")
}
func (UnimplementedBasicServer) AddIndustry(context.Context, *AddIndustryRequest) (*AddIndustryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIndustry not implemented")
}
func (UnimplementedBasicServer) UpdateIndustry(context.Context, *UpdateIndustryRequest) (*UpdateIndustryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIndustry not implemented")
}
func (UnimplementedBasicServer) DeleteIndustry(context.Context, *DeleteIndustryRequest) (*DeleteIndustryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndustry not implemented")
}
func (UnimplementedBasicServer) GetClassify(context.Context, *GetClassifyRequest) (*GetClassifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassify not implemented")
}
func (UnimplementedBasicServer) GetClassifies(context.Context, *GetClassifiesRequest) (*GetClassifiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassifies not implemented")
}
func (UnimplementedBasicServer) AddClassify(context.Context, *AddClassifyRequest) (*AddClassifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClassify not implemented")
}
func (UnimplementedBasicServer) UpdateClassify(context.Context, *UpdateClassifyRequest) (*UpdateClassifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClassify not implemented")
}
func (UnimplementedBasicServer) DeleteClassify(context.Context, *DeleteClassifyRequest) (*DeleteClassifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClassify not implemented")
}
func (UnimplementedBasicServer) GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedBasicServer) GetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedBasicServer) AddCategory(context.Context, *AddCategoryRequest) (*AddCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCategory not implemented")
}
func (UnimplementedBasicServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedBasicServer) DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedBasicServer) GetStage(context.Context, *GetStageRequest) (*GetStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStage not implemented")
}
func (UnimplementedBasicServer) GetStages(context.Context, *GetStagesRequest) (*GetStagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStages not implemented")
}
func (UnimplementedBasicServer) AddStage(context.Context, *AddStageRequest) (*AddStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStage not implemented")
}
func (UnimplementedBasicServer) UpdateStage(context.Context, *UpdateStageRequest) (*UpdateStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStage not implemented")
}
func (UnimplementedBasicServer) DeleteStage(context.Context, *DeleteStageRequest) (*DeleteStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStage not implemented")
}
func (UnimplementedBasicServer) GetConfiguration(context.Context, *GetConfigurationRequest) (*GetConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedBasicServer) GetConfigurationByName(context.Context, *GetConfigurationByNameRequest) (*GetConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigurationByName not implemented")
}
func (UnimplementedBasicServer) GetConfigurations(context.Context, *GetConfigurationsRequest) (*GetConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigurations not implemented")
}
func (UnimplementedBasicServer) AddConfiguration(context.Context, *AddConfigurationRequest) (*AddConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConfiguration not implemented")
}
func (UnimplementedBasicServer) UpdateConfiguration(context.Context, *UpdateConfigurationRequest) (*UpdateConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfiguration not implemented")
}
func (UnimplementedBasicServer) DeleteConfiguration(context.Context, *DeleteConfigurationRequest) (*DeleteConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfiguration not implemented")
}
func (UnimplementedBasicServer) mustEmbedUnimplementedBasicServer() {}

// UnsafeBasicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicServer will
// result in compilation errors.
type UnsafeBasicServer interface {
	mustEmbedUnimplementedBasicServer()
}

func RegisterBasicServer(s grpc.ServiceRegistrar, srv BasicServer) {
	s.RegisterService(&Basic_ServiceDesc, srv)
}

func _Basic_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_GetRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).GetRegion(ctx, req.(*GetRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_GetRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).GetRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_GetRegions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).GetRegions(ctx, req.(*GetRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_AddRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).AddRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_AddRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).AddRegion(ctx, req.(*AddRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_UpdateRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).UpdateRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_UpdateRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).UpdateRegion(ctx, req.(*UpdateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_DeleteRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).DeleteRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_DeleteRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).DeleteRegion(ctx, req.(*DeleteRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_GetIndustry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndustryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).GetIndustry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_GetIndustry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).GetIndustry(ctx, req.(*GetIndustryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_GetIndustryByIndustryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndustryByIndustryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).GetIndustryByIndustryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_GetIndustryByIndustryId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).GetIndustryByIndustryId(ctx, req.(*GetIndustryByIndustryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_GetIndustries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndustriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).GetIndustries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_GetIndustries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).GetIndustries(ctx, req.(*GetIndustriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_AddIndustry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIndustryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).AddIndustry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_AddIndustry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).AddIndustry(ctx, req.(*AddIndustryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_UpdateIndustry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIndustryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).UpdateIndustry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_UpdateIndustry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).UpdateIndustry(ctx, req.(*UpdateIndustryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_DeleteIndustry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndustryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).DeleteIndustry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_DeleteIndustry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).DeleteIndustry(ctx, req.(*DeleteIndustryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_GetClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).GetClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_GetClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).GetClassify(ctx, req.(*GetClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_GetClassifies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassifiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).GetClassifies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_GetClassifies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).GetClassifies(ctx, req.(*GetClassifiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_AddClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).AddClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_AddClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).AddClassify(ctx, req.(*AddClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_UpdateClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).UpdateClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_UpdateClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).UpdateClassify(ctx, req.(*UpdateClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_DeleteClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).DeleteClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_DeleteClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).DeleteClassify(ctx, req.(*DeleteClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_GetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).GetCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_GetCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).GetCategories(ctx, req.(*GetCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_AddCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).AddCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_AddCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).AddCategory(ctx, req.(*AddCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_GetStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).GetStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_GetStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).GetStage(ctx, req.(*GetStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_GetStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).GetStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_GetStages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).GetStages(ctx, req.(*GetStagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_AddStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).AddStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_AddStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).AddStage(ctx, req.(*AddStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_UpdateStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).UpdateStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_UpdateStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).UpdateStage(ctx, req.(*UpdateStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_DeleteStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).DeleteStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_DeleteStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).DeleteStage(ctx, req.(*DeleteStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_GetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).GetConfiguration(ctx, req.(*GetConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_GetConfigurationByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigurationByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).GetConfigurationByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_GetConfigurationByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).GetConfigurationByName(ctx, req.(*GetConfigurationByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_GetConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).GetConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_GetConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).GetConfigurations(ctx, req.(*GetConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_AddConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).AddConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_AddConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).AddConfiguration(ctx, req.(*AddConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_UpdateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).UpdateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_UpdateConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).UpdateConfiguration(ctx, req.(*UpdateConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_DeleteConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).DeleteConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basic_DeleteConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).DeleteConfiguration(ctx, req.(*DeleteConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Basic_ServiceDesc is the grpc.ServiceDesc for Basic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Basic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basic.Basic",
	HandlerType: (*BasicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Basic_Ping_Handler,
		},
		{
			MethodName: "getRegion",
			Handler:    _Basic_GetRegion_Handler,
		},
		{
			MethodName: "getRegions",
			Handler:    _Basic_GetRegions_Handler,
		},
		{
			MethodName: "addRegion",
			Handler:    _Basic_AddRegion_Handler,
		},
		{
			MethodName: "updateRegion",
			Handler:    _Basic_UpdateRegion_Handler,
		},
		{
			MethodName: "deleteRegion",
			Handler:    _Basic_DeleteRegion_Handler,
		},
		{
			MethodName: "getIndustry",
			Handler:    _Basic_GetIndustry_Handler,
		},
		{
			MethodName: "getIndustryByIndustryId",
			Handler:    _Basic_GetIndustryByIndustryId_Handler,
		},
		{
			MethodName: "getIndustries",
			Handler:    _Basic_GetIndustries_Handler,
		},
		{
			MethodName: "addIndustry",
			Handler:    _Basic_AddIndustry_Handler,
		},
		{
			MethodName: "updateIndustry",
			Handler:    _Basic_UpdateIndustry_Handler,
		},
		{
			MethodName: "deleteIndustry",
			Handler:    _Basic_DeleteIndustry_Handler,
		},
		{
			MethodName: "getClassify",
			Handler:    _Basic_GetClassify_Handler,
		},
		{
			MethodName: "getClassifies",
			Handler:    _Basic_GetClassifies_Handler,
		},
		{
			MethodName: "addClassify",
			Handler:    _Basic_AddClassify_Handler,
		},
		{
			MethodName: "updateClassify",
			Handler:    _Basic_UpdateClassify_Handler,
		},
		{
			MethodName: "deleteClassify",
			Handler:    _Basic_DeleteClassify_Handler,
		},
		{
			MethodName: "getCategory",
			Handler:    _Basic_GetCategory_Handler,
		},
		{
			MethodName: "getCategories",
			Handler:    _Basic_GetCategories_Handler,
		},
		{
			MethodName: "addCategory",
			Handler:    _Basic_AddCategory_Handler,
		},
		{
			MethodName: "updateCategory",
			Handler:    _Basic_UpdateCategory_Handler,
		},
		{
			MethodName: "deleteCategory",
			Handler:    _Basic_DeleteCategory_Handler,
		},
		{
			MethodName: "getStage",
			Handler:    _Basic_GetStage_Handler,
		},
		{
			MethodName: "getStages",
			Handler:    _Basic_GetStages_Handler,
		},
		{
			MethodName: "addStage",
			Handler:    _Basic_AddStage_Handler,
		},
		{
			MethodName: "updateStage",
			Handler:    _Basic_UpdateStage_Handler,
		},
		{
			MethodName: "deleteStage",
			Handler:    _Basic_DeleteStage_Handler,
		},
		{
			MethodName: "getConfiguration",
			Handler:    _Basic_GetConfiguration_Handler,
		},
		{
			MethodName: "getConfigurationByName",
			Handler:    _Basic_GetConfigurationByName_Handler,
		},
		{
			MethodName: "getConfigurations",
			Handler:    _Basic_GetConfigurations_Handler,
		},
		{
			MethodName: "addConfiguration",
			Handler:    _Basic_AddConfiguration_Handler,
		},
		{
			MethodName: "updateConfiguration",
			Handler:    _Basic_UpdateConfiguration_Handler,
		},
		{
			MethodName: "deleteConfiguration",
			Handler:    _Basic_DeleteConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "basic.proto",
}
