// Code generated by goctl. DO NOT EDIT.
// Source: basic.proto

package server

import (
	"context"

	"go-micro/platform/basic/rpc/basic"
	"go-micro/platform/basic/rpc/internal/logic/basicconfigurationservice"
	"go-micro/platform/basic/rpc/internal/svc"
)

type BasicConfigurationServiceServer struct {
	svcCtx *svc.ServiceContext
	basic.UnimplementedBasicConfigurationServiceServer
}

func NewBasicConfigurationServiceServer(svcCtx *svc.ServiceContext) *BasicConfigurationServiceServer {
	return &BasicConfigurationServiceServer{
		svcCtx: svcCtx,
	}
}

// 获取配置信息
func (s *BasicConfigurationServiceServer) GetConfiguration(ctx context.Context, in *basic.GetConfigurationRequest) (*basic.GetConfigurationResponse, error) {
	l := basicconfigurationservicelogic.NewGetConfigurationLogic(ctx, s.svcCtx)
	return l.GetConfiguration(in)
}

// 根据配置名称获取配置信息
func (s *BasicConfigurationServiceServer) GetConfigurationByName(ctx context.Context, in *basic.GetConfigurationByNameRequest) (*basic.GetConfigurationResponse, error) {
	l := basicconfigurationservicelogic.NewGetConfigurationByNameLogic(ctx, s.svcCtx)
	return l.GetConfigurationByName(in)
}

// 获取配置列表
func (s *BasicConfigurationServiceServer) GetConfigurations(ctx context.Context, in *basic.GetConfigurationsRequest) (*basic.GetConfigurationsResponse, error) {
	l := basicconfigurationservicelogic.NewGetConfigurationsLogic(ctx, s.svcCtx)
	return l.GetConfigurations(in)
}

// 添加配置信息
func (s *BasicConfigurationServiceServer) AddConfiguration(ctx context.Context, in *basic.AddConfigurationRequest) (*basic.AddConfigurationResponse, error) {
	l := basicconfigurationservicelogic.NewAddConfigurationLogic(ctx, s.svcCtx)
	return l.AddConfiguration(in)
}

// 更新配置信息
func (s *BasicConfigurationServiceServer) UpdateConfiguration(ctx context.Context, in *basic.UpdateConfigurationRequest) (*basic.UpdateConfigurationResponse, error) {
	l := basicconfigurationservicelogic.NewUpdateConfigurationLogic(ctx, s.svcCtx)
	return l.UpdateConfiguration(in)
}

// 删除配置信息
func (s *BasicConfigurationServiceServer) DeleteConfiguration(ctx context.Context, in *basic.DeleteConfigurationRequest) (*basic.DeleteConfigurationResponse, error) {
	l := basicconfigurationservicelogic.NewDeleteConfigurationLogic(ctx, s.svcCtx)
	return l.DeleteConfiguration(in)
}
