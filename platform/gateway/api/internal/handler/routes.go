// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"
	"time"

	accountauth "go-micro/platform/gateway/api/internal/handler/account/auth"
	basiccategory "go-micro/platform/gateway/api/internal/handler/basic/category"
	basicclassify "go-micro/platform/gateway/api/internal/handler/basic/classify"
	basicconfiguration "go-micro/platform/gateway/api/internal/handler/basic/configuration"
	basicindustry "go-micro/platform/gateway/api/internal/handler/basic/industry"
	basicregion "go-micro/platform/gateway/api/internal/handler/basic/region"
	basicstage "go-micro/platform/gateway/api/internal/handler/basic/stage"
	informationtopic "go-micro/platform/gateway/api/internal/handler/information/topic"
	"go-micro/platform/gateway/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/category/:id",
				Handler: basiccategory.GetCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/categories/:parent_id",
				Handler: basiccategory.GetCategoriesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/category",
				Handler: basiccategory.AddCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/category/:id",
				Handler: basiccategory.UpdateCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/category/:id",
				Handler: basiccategory.DeleteCategoryHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gateway/basic"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/categoryTree",
				Handler: basiccategory.GetCategoryTreeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gateway/basic"),
		rest.WithTimeout(5000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/classify/:id",
				Handler: basicclassify.GetClassifyHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/classifies/:parent_id",
				Handler: basicclassify.GetClassifiesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/classify",
				Handler: basicclassify.AddClassifyHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/classify/:id",
				Handler: basicclassify.UpdateClassifyHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/classify/:id",
				Handler: basicclassify.DeleteClassifyHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gateway/basic"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/classifyTree",
				Handler: basicclassify.GetClassifyTreeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gateway/basic"),
		rest.WithTimeout(5000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/configuration/:id",
				Handler: basicconfiguration.GetConfigurationHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/configuration/name/:name",
				Handler: basicconfiguration.GetConfigurationByNameHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/configurations",
				Handler: basicconfiguration.GetConfigurationsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/configuration",
				Handler: basicconfiguration.AddConfigurationHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/configuration/:id",
				Handler: basicconfiguration.UpdateConfigurationHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/configuration/:id",
				Handler: basicconfiguration.DeleteConfigurationHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gateway/basic"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/region/:id",
				Handler: basicregion.GetRegionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/regions/:parent_id",
				Handler: basicregion.GetRegionsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/region",
				Handler: basicregion.AddRegionHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/region/:id",
				Handler: basicregion.UpdateRegionHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/region/:id",
				Handler: basicregion.DeleteRegionHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gateway/basic"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/regionTree",
				Handler: basicregion.GetRegionTreeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gateway/basic"),
		rest.WithTimeout(5000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/industry/:id",
				Handler: basicindustry.GetIndustryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/industry/industryId/:industry_id",
				Handler: basicindustry.GetIndustryByIndustryIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/industries/:parent_id",
				Handler: basicindustry.GetIndustriesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/industry",
				Handler: basicindustry.AddIndustryHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/industry/:id",
				Handler: basicindustry.UpdateIndustryHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/industry/:id",
				Handler: basicindustry.DeleteIndustryHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gateway/basic"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/industryTree",
				Handler: basicindustry.GetIndustryTreeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gateway/basic"),
		rest.WithTimeout(5000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/stage/:id",
				Handler: basicstage.GetStageHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/stages",
				Handler: basicstage.GetStagesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/stage",
				Handler: basicstage.AddStageHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/stage/:id",
				Handler: basicstage.UpdateStageHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/stage/:id",
				Handler: basicstage.DeleteStageHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gateway/basic"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: accountauth.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: accountauth.LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gateway/account"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/user/:id",
				Handler: accountauth.GetUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/user/:id",
				Handler: accountauth.UpdateUserHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/gateway/account"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/topic",
				Handler: informationtopic.AddTopicHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/topic/:id",
				Handler: informationtopic.UpdateTopicHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/topic/:id",
				Handler: informationtopic.GetTopicHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/topic/list",
				Handler: informationtopic.GetTopicListHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/topic/:id",
				Handler: informationtopic.DeleteTopicHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gateway/information"),
	)
}
