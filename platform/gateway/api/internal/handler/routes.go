// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	"go-micro/platform/gateway/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/region/:id",
				Handler: getRegionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/regions/:parent_id",
				Handler: getRegionsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/regionTree",
				Handler: getRegionTreeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/region",
				Handler: addRegionHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/region/:id",
				Handler: updateRegionHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/region/:id",
				Handler: deleteRegionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/industry/:id",
				Handler: getIndustryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/industry/industryId/:industry_id",
				Handler: getIndustryByIndustryIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/industries/:parent_id",
				Handler: getIndustriesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/industryTree",
				Handler: getIndustryTreeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/industry",
				Handler: addIndustryHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/industry/:id",
				Handler: updateIndustryHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/industry/:id",
				Handler: deleteIndustryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/category/:id",
				Handler: getCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/categories/:parent_id",
				Handler: getCategoriesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/categoryTree",
				Handler: getCategoryTreeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/category",
				Handler: addCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/category/:id",
				Handler: updateCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/category/:id",
				Handler: deleteCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/classify/:id",
				Handler: getClassifyHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/classifies/:parent_id",
				Handler: getClassifiesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/classifyTree",
				Handler: getClassifyTreeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/classify",
				Handler: addClassifyHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/classify/:id",
				Handler: updateClassifyHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/classify/:id",
				Handler: deleteClassifyHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/stage/:id",
				Handler: getStageHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/stages",
				Handler: getStagesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/stage",
				Handler: addStageHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/stage/:id",
				Handler: updateStageHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/stage/:id",
				Handler: deleteStageHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/configuration/:id",
				Handler: getConfigurationHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/configuration/name/:name",
				Handler: getConfigurationByNameHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/configurations",
				Handler: getConfigurationsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/configuration",
				Handler: addConfigurationHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/configuration/:id",
				Handler: updateConfigurationHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/configuration/:id",
				Handler: deleteConfigurationHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/topic",
				Handler: addTopicHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/topic/:id",
				Handler: updateTopicHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/topic/:id",
				Handler: getTopicHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/topic/list",
				Handler: getTopicListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: registerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: loginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gateway"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/user/:id",
				Handler: getUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/user/:id",
				Handler: updateUserHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/gateway"),
	)
}
