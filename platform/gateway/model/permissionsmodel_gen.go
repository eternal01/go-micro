// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	permissionsFieldNames          = builder.RawFieldNames(&Permissions{})
	permissionsRows                = strings.Join(permissionsFieldNames, ",")
	permissionsRowsExpectAutoSet   = strings.Join(stringx.Remove(permissionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	permissionsRowsWithPlaceHolder = strings.Join(stringx.Remove(permissionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cachePermissionsIdPrefix   = "cache:permissions:id:"
	cachePermissionsNamePrefix = "cache:permissions:name:"
)

type (
	permissionsModel interface {
		Insert(ctx context.Context, data *Permissions) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Permissions, error)
		FindOneByName(ctx context.Context, name string) (*Permissions, error)
		Update(ctx context.Context, data *Permissions) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPermissionsModel struct {
		sqlc.CachedConn
		table string
	}

	Permissions struct {
		Id          int64        `db:"id"`          // 主键id
		Name        string       `db:"name"`        // 权限名称
		Method      string       `db:"method"`      // 方法
		Url         string       `db:"url"`         // 路径
		Description string       `db:"description"` // 描述
		CreatedAt   sql.NullTime `db:"created_at"`  // 创建时间
		UpdatedAt   sql.NullTime `db:"updated_at"`  // 更新时间
		DeletedAt   sql.NullTime `db:"deleted_at"`  // 删除时间
	}
)

func newPermissionsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPermissionsModel {
	return &defaultPermissionsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`permissions`",
	}
}

func (m *defaultPermissionsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	permissionsIdKey := fmt.Sprintf("%s%v", cachePermissionsIdPrefix, id)
	permissionsNameKey := fmt.Sprintf("%s%v", cachePermissionsNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, permissionsIdKey, permissionsNameKey)
	return err
}

func (m *defaultPermissionsModel) FindOne(ctx context.Context, id int64) (*Permissions, error) {
	permissionsIdKey := fmt.Sprintf("%s%v", cachePermissionsIdPrefix, id)
	var resp Permissions
	err := m.QueryRowCtx(ctx, &resp, permissionsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", permissionsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPermissionsModel) FindOneByName(ctx context.Context, name string) (*Permissions, error) {
	permissionsNameKey := fmt.Sprintf("%s%v", cachePermissionsNamePrefix, name)
	var resp Permissions
	err := m.QueryRowIndexCtx(ctx, &resp, permissionsNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", permissionsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPermissionsModel) Insert(ctx context.Context, data *Permissions) (sql.Result, error) {
	permissionsIdKey := fmt.Sprintf("%s%v", cachePermissionsIdPrefix, data.Id)
	permissionsNameKey := fmt.Sprintf("%s%v", cachePermissionsNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, permissionsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Method, data.Url, data.Description, data.DeletedAt)
	}, permissionsIdKey, permissionsNameKey)
	return ret, err
}

func (m *defaultPermissionsModel) Update(ctx context.Context, newData *Permissions) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	permissionsIdKey := fmt.Sprintf("%s%v", cachePermissionsIdPrefix, data.Id)
	permissionsNameKey := fmt.Sprintf("%s%v", cachePermissionsNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, permissionsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Method, newData.Url, newData.Description, newData.DeletedAt, newData.Id)
	}, permissionsIdKey, permissionsNameKey)
	return err
}

func (m *defaultPermissionsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePermissionsIdPrefix, primary)
}

func (m *defaultPermissionsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", permissionsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPermissionsModel) tableName() string {
	return m.table
}
