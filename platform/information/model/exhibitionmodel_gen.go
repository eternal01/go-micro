// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	exhibitionFieldNames          = builder.RawFieldNames(&Exhibition{})
	exhibitionRows                = strings.Join(exhibitionFieldNames, ",")
	exhibitionRowsExpectAutoSet   = strings.Join(stringx.Remove(exhibitionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	exhibitionRowsWithPlaceHolder = strings.Join(stringx.Remove(exhibitionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheExhibitionIdPrefix = "cache:exhibition:id:"
)

type (
	exhibitionModel interface {
		Insert(ctx context.Context, data *Exhibition) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Exhibition, error)
		Update(ctx context.Context, data *Exhibition) error
		Delete(ctx context.Context, id int64) error
	}

	defaultExhibitionModel struct {
		sqlc.CachedConn
		table string
	}

	Exhibition struct {
		Id         int64          `db:"id"`          // 主键id
		Title      string         `db:"title"`       // 标题
		Img        string         `db:"img"`         // 首图
		Content    sql.NullString `db:"content"`     // 内容
		Status     int64          `db:"status"`      // 状态
		StageId    int64          `db:"stage_id"`    // 阶段id
		CategoryId int64          `db:"category_id"` // 类别id
		CountryId  int64          `db:"country_id"`  // 国家id
		ProvinceId int64          `db:"province_id"` // 省id
		CityId     int64          `db:"city_id"`     // 市id
		AreaId     int64          `db:"area_id"`     // 区id
		Address    string         `db:"address"`     // 地址
		UserId     int64          `db:"user_id"`     // 用户id
		AuditorId  int64          `db:"auditor_id"`  // 审核者id
		CreatedAt  time.Time      `db:"created_at"`  // 创建时间
		UpdatedAt  time.Time      `db:"updated_at"`  // 更新时间
		AuditedAt  sql.NullTime   `db:"audited_at"`  // 审核时间
		DeletedAt  sql.NullTime   `db:"deleted_at"`  // 删除时间
	}
)

func newExhibitionModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultExhibitionModel {
	return &defaultExhibitionModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`exhibition`",
	}
}

func (m *defaultExhibitionModel) Delete(ctx context.Context, id int64) error {
	exhibitionIdKey := fmt.Sprintf("%s%v", cacheExhibitionIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, exhibitionIdKey)
	return err
}

func (m *defaultExhibitionModel) FindOne(ctx context.Context, id int64) (*Exhibition, error) {
	exhibitionIdKey := fmt.Sprintf("%s%v", cacheExhibitionIdPrefix, id)
	var resp Exhibition
	err := m.QueryRowCtx(ctx, &resp, exhibitionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", exhibitionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultExhibitionModel) Insert(ctx context.Context, data *Exhibition) (sql.Result, error) {
	exhibitionIdKey := fmt.Sprintf("%s%v", cacheExhibitionIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, exhibitionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Title, data.Img, data.Content, data.Status, data.StageId, data.CategoryId, data.CountryId, data.ProvinceId, data.CityId, data.AreaId, data.Address, data.UserId, data.AuditorId, data.AuditedAt, data.DeletedAt)
	}, exhibitionIdKey)
	return ret, err
}

func (m *defaultExhibitionModel) Update(ctx context.Context, data *Exhibition) error {
	exhibitionIdKey := fmt.Sprintf("%s%v", cacheExhibitionIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, exhibitionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Title, data.Img, data.Content, data.Status, data.StageId, data.CategoryId, data.CountryId, data.ProvinceId, data.CityId, data.AreaId, data.Address, data.UserId, data.AuditorId, data.AuditedAt, data.DeletedAt, data.Id)
	}, exhibitionIdKey)
	return err
}

func (m *defaultExhibitionModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheExhibitionIdPrefix, primary)
}

func (m *defaultExhibitionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", exhibitionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultExhibitionModel) tableName() string {
	return m.table
}
