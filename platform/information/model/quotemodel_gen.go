// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	quoteFieldNames          = builder.RawFieldNames(&Quote{})
	quoteRows                = strings.Join(quoteFieldNames, ",")
	quoteRowsExpectAutoSet   = strings.Join(stringx.Remove(quoteFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	quoteRowsWithPlaceHolder = strings.Join(stringx.Remove(quoteFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheQuoteIdPrefix = "cache:quote:id:"
)

type (
	quoteModel interface {
		Insert(ctx context.Context, data *Quote) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Quote, error)
		Update(ctx context.Context, data *Quote) error
		Delete(ctx context.Context, id int64) error
	}

	defaultQuoteModel struct {
		sqlc.CachedConn
		table string
	}

	Quote struct {
		Id        int64          `db:"id"`         // 主键id
		Title     string         `db:"title"`      // 标题
		Img       string         `db:"img"`        // 首图
		Content   sql.NullString `db:"content"`    // 内容
		Status    int64          `db:"status"`     // 状态
		UserId    int64          `db:"user_id"`    // 用户id
		AuditorId int64          `db:"auditor_id"` // 审核者id
		CreatedAt time.Time      `db:"created_at"` // 创建时间
		UpdatedAt time.Time      `db:"updated_at"` // 更新时间
		AuditedAt sql.NullTime   `db:"audited_at"` // 审核时间
		DeletedAt sql.NullTime   `db:"deleted_at"` // 删除时间
	}
)

func newQuoteModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultQuoteModel {
	return &defaultQuoteModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`quote`",
	}
}

func (m *defaultQuoteModel) Delete(ctx context.Context, id int64) error {
	quoteIdKey := fmt.Sprintf("%s%v", cacheQuoteIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, quoteIdKey)
	return err
}

func (m *defaultQuoteModel) FindOne(ctx context.Context, id int64) (*Quote, error) {
	quoteIdKey := fmt.Sprintf("%s%v", cacheQuoteIdPrefix, id)
	var resp Quote
	err := m.QueryRowCtx(ctx, &resp, quoteIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", quoteRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQuoteModel) Insert(ctx context.Context, data *Quote) (sql.Result, error) {
	quoteIdKey := fmt.Sprintf("%s%v", cacheQuoteIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, quoteRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Title, data.Img, data.Content, data.Status, data.UserId, data.AuditorId, data.AuditedAt, data.DeletedAt)
	}, quoteIdKey)
	return ret, err
}

func (m *defaultQuoteModel) Update(ctx context.Context, data *Quote) error {
	quoteIdKey := fmt.Sprintf("%s%v", cacheQuoteIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, quoteRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Title, data.Img, data.Content, data.Status, data.UserId, data.AuditorId, data.AuditedAt, data.DeletedAt, data.Id)
	}, quoteIdKey)
	return err
}

func (m *defaultQuoteModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheQuoteIdPrefix, primary)
}

func (m *defaultQuoteModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", quoteRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultQuoteModel) tableName() string {
	return m.table
}
