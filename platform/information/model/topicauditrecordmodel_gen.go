// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	topicAuditRecordFieldNames          = builder.RawFieldNames(&TopicAuditRecord{})
	topicAuditRecordRows                = strings.Join(topicAuditRecordFieldNames, ",")
	topicAuditRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(topicAuditRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	topicAuditRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(topicAuditRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTopicAuditRecordIdPrefix = "cache:topicAuditRecord:id:"
)

type (
	topicAuditRecordModel interface {
		Insert(ctx context.Context, data *TopicAuditRecord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TopicAuditRecord, error)
		Update(ctx context.Context, data *TopicAuditRecord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTopicAuditRecordModel struct {
		sqlc.CachedConn
		table string
	}

	TopicAuditRecord struct {
		Id        int64        `db:"id"`         // 主键id
		TopicId   int64        `db:"topic_id"`   // 文章id
		Status    int64        `db:"status"`     // 审核状态
		Remark    string       `db:"remark"`     // 备注
		AuditorId int64        `db:"auditor_id"` // 审核者id
		CreatedAt time.Time    `db:"created_at"` // 创建时间
		UpdatedAt time.Time    `db:"updated_at"` // 更新时间
		DeletedAt sql.NullTime `db:"deleted_at"` // 删除时间
	}
)

func newTopicAuditRecordModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTopicAuditRecordModel {
	return &defaultTopicAuditRecordModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`topic_audit_record`",
	}
}

func (m *defaultTopicAuditRecordModel) Delete(ctx context.Context, id int64) error {
	topicAuditRecordIdKey := fmt.Sprintf("%s%v", cacheTopicAuditRecordIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, topicAuditRecordIdKey)
	return err
}

func (m *defaultTopicAuditRecordModel) FindOne(ctx context.Context, id int64) (*TopicAuditRecord, error) {
	topicAuditRecordIdKey := fmt.Sprintf("%s%v", cacheTopicAuditRecordIdPrefix, id)
	var resp TopicAuditRecord
	err := m.QueryRowCtx(ctx, &resp, topicAuditRecordIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", topicAuditRecordRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTopicAuditRecordModel) Insert(ctx context.Context, data *TopicAuditRecord) (sql.Result, error) {
	topicAuditRecordIdKey := fmt.Sprintf("%s%v", cacheTopicAuditRecordIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, topicAuditRecordRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TopicId, data.Status, data.Remark, data.AuditorId, data.DeletedAt)
	}, topicAuditRecordIdKey)
	return ret, err
}

func (m *defaultTopicAuditRecordModel) Update(ctx context.Context, data *TopicAuditRecord) error {
	topicAuditRecordIdKey := fmt.Sprintf("%s%v", cacheTopicAuditRecordIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, topicAuditRecordRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TopicId, data.Status, data.Remark, data.AuditorId, data.DeletedAt, data.Id)
	}, topicAuditRecordIdKey)
	return err
}

func (m *defaultTopicAuditRecordModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTopicAuditRecordIdPrefix, primary)
}

func (m *defaultTopicAuditRecordModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", topicAuditRecordRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTopicAuditRecordModel) tableName() string {
	return m.table
}
