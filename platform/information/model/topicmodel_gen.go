// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	topicFieldNames          = builder.RawFieldNames(&Topic{})
	topicRows                = strings.Join(topicFieldNames, ",")
	topicRowsExpectAutoSet   = strings.Join(stringx.Remove(topicFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	topicRowsWithPlaceHolder = strings.Join(stringx.Remove(topicFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTopicIdPrefix = "cache:topic:id:"
)

type (
	topicModel interface {
		Insert(ctx context.Context, data *Topic) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Topic, error)
		Update(ctx context.Context, data *Topic) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTopicModel struct {
		sqlc.CachedConn
		table string
	}

	Topic struct {
		Id         int64          `db:"id"`
		Title      string         `db:"title"`       // 标题
		Img        string         `db:"img"`         // 首图
		Content    sql.NullString `db:"content"`     // 内容
		Status     int64          `db:"status"`      // 状态
		StageId    int64          `db:"stage_id"`    // 阶段id
		CategoryId int64          `db:"category_id"` // 类别id
		UserId     int64          `db:"user_id"`     // 用户id
		AuditorId  int64          `db:"auditor_id"`  // 审核者id
		CreatedAt  time.Time      `db:"created_at"`  // 创建时间
		UpdatedAt  time.Time      `db:"updated_at"`  // 更新时间
		AuditedAt  sql.NullTime   `db:"audited_at"`  // 审核时间
		DeletedAt  sql.NullTime   `db:"deleted_at"`  // 删除时间
	}
)

func newTopicModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTopicModel {
	return &defaultTopicModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`topic`",
	}
}

func (m *defaultTopicModel) Delete(ctx context.Context, id int64) error {
	topicIdKey := fmt.Sprintf("%s%v", cacheTopicIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, topicIdKey)
	return err
}

func (m *defaultTopicModel) FindOne(ctx context.Context, id int64) (*Topic, error) {
	topicIdKey := fmt.Sprintf("%s%v", cacheTopicIdPrefix, id)
	var resp Topic
	err := m.QueryRowCtx(ctx, &resp, topicIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", topicRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTopicModel) Insert(ctx context.Context, data *Topic) (sql.Result, error) {
	topicIdKey := fmt.Sprintf("%s%v", cacheTopicIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, topicRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Title, data.Img, data.Content, data.Status, data.StageId, data.CategoryId, data.UserId, data.AuditorId, data.AuditedAt, data.DeletedAt)
	}, topicIdKey)
	return ret, err
}

func (m *defaultTopicModel) Update(ctx context.Context, data *Topic) error {
	topicIdKey := fmt.Sprintf("%s%v", cacheTopicIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, topicRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Title, data.Img, data.Content, data.Status, data.StageId, data.CategoryId, data.UserId, data.AuditorId, data.AuditedAt, data.DeletedAt, data.Id)
	}, topicIdKey)
	return err
}

func (m *defaultTopicModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTopicIdPrefix, primary)
}

func (m *defaultTopicModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", topicRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTopicModel) tableName() string {
	return m.table
}
