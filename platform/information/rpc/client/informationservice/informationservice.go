// Code generated by goctl. DO NOT EDIT.
// Source: information.proto

package informationservice

import (
	"context"

	"go-micro/platform/information/rpc/information"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddTopicAuditRecordRequest  = information.AddTopicAuditRecordRequest
	AddTopicAuditRecordResponse = information.AddTopicAuditRecordResponse
	AddTopicRequest             = information.AddTopicRequest
	AddTopicResponse            = information.AddTopicResponse
	DeleteTopicRequest          = information.DeleteTopicRequest
	DeleteTopicResponse         = information.DeleteTopicResponse
	GetTopicAuditRecordRequest  = information.GetTopicAuditRecordRequest
	GetTopicAuditRecordResponse = information.GetTopicAuditRecordResponse
	GetTopicRequest             = information.GetTopicRequest
	GetTopicResponse            = information.GetTopicResponse
	GetTopicsRequest            = information.GetTopicsRequest
	GetTopicsResponse           = information.GetTopicsResponse
	Request                     = information.Request
	Response                    = information.Response
	Topic                       = information.Topic
	UpdateTopicRequest          = information.UpdateTopicRequest
	UpdateTopicResponse         = information.UpdateTopicResponse

	InformationService interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	}

	defaultInformationService struct {
		cli zrpc.Client
	}
)

func NewInformationService(cli zrpc.Client) InformationService {
	return &defaultInformationService{
		cli: cli,
	}
}

func (m *defaultInformationService) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := information.NewInformationServiceClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}
