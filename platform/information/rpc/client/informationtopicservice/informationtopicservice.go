// Code generated by goctl. DO NOT EDIT.
// Source: information.proto

package informationtopicservice

import (
	"context"

	"go-micro/platform/information/rpc/information"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddTopicAuditRecordRequest  = information.AddTopicAuditRecordRequest
	AddTopicAuditRecordResponse = information.AddTopicAuditRecordResponse
	AddTopicRequest             = information.AddTopicRequest
	AddTopicResponse            = information.AddTopicResponse
	DeleteTopicRequest          = information.DeleteTopicRequest
	DeleteTopicResponse         = information.DeleteTopicResponse
	GetTopicAuditRecordRequest  = information.GetTopicAuditRecordRequest
	GetTopicAuditRecordResponse = information.GetTopicAuditRecordResponse
	GetTopicRequest             = information.GetTopicRequest
	GetTopicResponse            = information.GetTopicResponse
	GetTopicsRequest            = information.GetTopicsRequest
	GetTopicsResponse           = information.GetTopicsResponse
	Request                     = information.Request
	Response                    = information.Response
	Topic                       = information.Topic
	UpdateTopicRequest          = information.UpdateTopicRequest
	UpdateTopicResponse         = information.UpdateTopicResponse

	InformationTopicService interface {
		// 添加文章
		AddTopic(ctx context.Context, in *AddTopicRequest, opts ...grpc.CallOption) (*AddTopicResponse, error)
		// 获取文章
		GetTopic(ctx context.Context, in *GetTopicRequest, opts ...grpc.CallOption) (*GetTopicResponse, error)
		// 获取文章列表
		GetTopicList(ctx context.Context, in *GetTopicsRequest, opts ...grpc.CallOption) (*GetTopicsResponse, error)
		// 编辑文章
		UpdateTopic(ctx context.Context, in *UpdateTopicRequest, opts ...grpc.CallOption) (*UpdateTopicResponse, error)
		// 删除文章
		DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicResponse, error)
	}

	defaultInformationTopicService struct {
		cli zrpc.Client
	}
)

func NewInformationTopicService(cli zrpc.Client) InformationTopicService {
	return &defaultInformationTopicService{
		cli: cli,
	}
}

// 添加文章
func (m *defaultInformationTopicService) AddTopic(ctx context.Context, in *AddTopicRequest, opts ...grpc.CallOption) (*AddTopicResponse, error) {
	client := information.NewInformationTopicServiceClient(m.cli.Conn())
	return client.AddTopic(ctx, in, opts...)
}

// 获取文章
func (m *defaultInformationTopicService) GetTopic(ctx context.Context, in *GetTopicRequest, opts ...grpc.CallOption) (*GetTopicResponse, error) {
	client := information.NewInformationTopicServiceClient(m.cli.Conn())
	return client.GetTopic(ctx, in, opts...)
}

// 获取文章列表
func (m *defaultInformationTopicService) GetTopicList(ctx context.Context, in *GetTopicsRequest, opts ...grpc.CallOption) (*GetTopicsResponse, error) {
	client := information.NewInformationTopicServiceClient(m.cli.Conn())
	return client.GetTopicList(ctx, in, opts...)
}

// 编辑文章
func (m *defaultInformationTopicService) UpdateTopic(ctx context.Context, in *UpdateTopicRequest, opts ...grpc.CallOption) (*UpdateTopicResponse, error) {
	client := information.NewInformationTopicServiceClient(m.cli.Conn())
	return client.UpdateTopic(ctx, in, opts...)
}

// 删除文章
func (m *defaultInformationTopicService) DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicResponse, error) {
	client := information.NewInformationTopicServiceClient(m.cli.Conn())
	return client.DeleteTopic(ctx, in, opts...)
}
